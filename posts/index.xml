<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 欢迎来到我的博客</title>
        <link>https://zclam.github.io/posts/</link>
        <description>Recent content in Posts on 欢迎来到我的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Tue, 26 Jan 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://zclam.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>学习快速使用一门新技术</title>
            <link>https://zclam.github.io/posts/2021/01/%E5%AD%A6%E4%B9%A0%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E4%B8%80%E9%97%A8%E6%96%B0%E6%8A%80%E6%9C%AF/</link>
            <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://zclam.github.io/posts/2021/01/%E5%AD%A6%E4%B9%A0%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E4%B8%80%E9%97%A8%E6%96%B0%E6%8A%80%E6%9C%AF/</guid>
            <description>因为业务需求，让我去学习React，记录一下我整个学习过程。我的诉求是快速了解该技术紧接上手开发项目，然后在项目中慢慢理解该门技术。但是很可惜我无法快速上手，总结一下遇到的坑，以便以后在学习一门新技术的时候，以供参考。
@toc
之前的学习过程 所以总结一下经验，如果可以重来我会怎么学习，或者说未来面对一门新技术我应该如何快速上手。
下次如何使用新技术 1.搜索资料 花几个钟把可以找资料的渠道都找一下，遇到好的学习资料真的可以节省很多时间！需要的内容是基础知识和简单的项目
2.筛选资料 对比文字教学和视频教学（二倍速观看），花半天对比多几个教学看看哪个才是合适自己的，选择最合适自己的方法。
3.快速吸收 1.先看整个项目模板，了解一下大概。直接问自己，如果现在就开发的话，我应该掌握什么内容即可？？真的没有必要从0学起！！！因为学习周期过长会厌恶这个过程，而且也没有那么多时间。半天
2.将项目和基础教学结合起来，如果是视频类的基础教学（二倍速观看），难点才放慢，每次看视频完一个的时候，重新回忆一下重要的内容，翻到知识重点并且截图，做一下笔记。笔记一定要学完一次复习一次！
以下有两个大坑！
很多内容听不懂没关系，大概了解并且会用即可，因为一些内容可能要到有一定的开发经验才会理解。
知识断层不一定非要回去恶补，知道它用来干嘛即可，比如我前端开发经验特别少，而且很久没用过了，只知道JS\HTML\CSS是用来干嘛的，还有一些新的规则我也不清楚，但是不影响你快速上手！
最好别超过一周，具体看技术难度
4.实战开发 不要从0开始开发！ 不要从0开始开发！ 不要从0开始开发！
诉求是快速开发，所以从0开始没那么多时间了。直接改别人的项目，不懂得地方直接用谷歌查问题。 在这个实战的过程中慢慢的就会深入理解这门技术 </description>
            <content type="html"><![CDATA[<p>因为业务需求，让我去学习React，记录一下我整个学习过程。我的诉求是<strong>快速了解该技术紧接上手开发项目</strong>，然后在项目中慢慢理解该门技术。但是很可惜我无法快速上手，总结一下遇到的坑，以便以后在学习一门新技术的时候，以供参考。</p>
<!-- raw HTML omitted -->
<p>@<a href="%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E6%96%B0%E6%8A%80%E6%9C%AF">toc</a></p>
<h1 id="之前的学习过程">之前的学习过程</h1>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>所以总结一下经验，如果可以重来我会怎么学习，或者说未来面对一门新技术我应该如何快速上手。</p>
<h1 id="下次如何使用新技术">下次如何使用新技术</h1>
<h2 id="1搜索资料">1.搜索资料</h2>
<p>花几个钟把可以找资料的渠道都找一下，遇到好的学习资料真的可以节省很多时间！<strong>需要的内容是基础知识和简单的项目</strong></p>
<h2 id="2筛选资料">2.筛选资料</h2>
<p>对比文字教学和视频教学（二倍速观看），花半天对比多几个教学看看哪个才是合适自己的，<strong>选择最合适自己的方法。</strong></p>
<h2 id="3快速吸收">3.快速吸收</h2>
<p>1.先看整个项目模板，了解一下大概。直接问自己，如果现在就开发的话，我应该掌握什么内容即可？？真的没有必要从0学起！！！因为学习周期过长会厌恶这个过程，而且也没有那么多时间。半天</p>
<p>2.将项目和基础教学结合起来，如果是视频类的基础教学（二倍速观看），难点才放慢，每次看视频完一个的时候，重新回忆一下重要的内容，翻到知识重点并且截图，做一下笔记。笔记一定要学完一次复习一次！</p>
<p><strong>以下有两个大坑！</strong></p>
<p><strong>很多内容听不懂没关系，大概了解并且会用即可，因为一些内容可能要到有一定的开发经验才会理解。</strong></p>
<p><strong>知识断层不一定非要回去恶补，知道它用来干嘛即可，比如我前端开发经验特别少，而且很久没用过了，只知道JS\HTML\CSS是用来干嘛的，还有一些新的规则我也不清楚，但是不影响你快速上手！</strong></p>
<p>最好别超过一周，具体看技术难度</p>
<h2 id="4实战开发">4.实战开发</h2>
<p>不要从0开始开发！
不要从0开始开发！
不要从0开始开发！</p>
<p>诉求是快速开发，所以从0开始没那么多时间了。<strong>直接改别人的项目，不懂得地方直接用谷歌查问题。</strong>
在这个实战的过程中慢慢的就会深入理解这门技术
<img src="https://img-blog.csdnimg.cn/20210120150944422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmd0aWFveWFuZzY2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
<img src="https://img-blog.csdnimg.cn/20210120151019868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmd0aWFveWFuZzY2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
        </item>
        
        <item>
            <title>第3篇</title>
            <link>https://zclam.github.io/posts/2021/01/%E7%AC%AC3%E7%AF%87/</link>
            <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://zclam.github.io/posts/2021/01/%E7%AC%AC3%E7%AF%87/</guid>
            <description>之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</description>
            <content type="html"><![CDATA[<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
]]></content>
        </item>
        
        <item>
            <title>第3篇</title>
            <link>https://zclam.github.io/posts/2021/01/%E7%AC%AC3%E7%AF%87/</link>
            <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://zclam.github.io/posts/2021/01/%E7%AC%AC3%E7%AF%87/</guid>
            <description>之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。
之后打算用这个博客记录一下学习
hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。 开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</description>
            <content type="html"><![CDATA[<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
<p>之后打算用这个博客记录一下学习</p>
<p>hugo提供了通过主题构建网站的机制。hugo生态已经提供了300+的主题可以用。主题类似一种前端框架，可以帮助我们快速建站。我调研了一些主题，各有优点，也有令我不满意的地方，所以决定还是自己开发一套主题来用。
开发主题需要结合实际的项目来做，一边看效果一边做调整。下面以开发个人博客为例，介绍如何DIY自己的主题。</p>
]]></content>
        </item>
        
        <item>
            <title>第一篇</title>
            <link>https://zclam.github.io/posts/2021/01/%E7%AC%AC%E4%B8%80%E7%AF%87/</link>
            <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://zclam.github.io/posts/2021/01/%E7%AC%AC%E4%B8%80%E7%AF%87/</guid>
            <description>之后打算用这个博客记录一下学习 Skip to main content Search
Docs Power Platform Power Apps Create apps Dataverse Why choose Dataverse? Work with any app Search Filter by title Dataverse What is Dataverse? Overview Work with any data Importing and exporting data Work with any app Table overview Tables and metadata Types of tables Create a table Create a custom table that has components Edit a table Create and edit virtual tables Virtual table OData v4 data provider Define alternate keys using Power Apps portal Define alternate keys using solution explorer SharePoint, OneNote, and OneDrive integration Translate customized table and column text Import translated table and column text Security in Dataverse API limits overview For developers Chatbots AI Builder Work with any type of app 06/16/2020 6 minutes to read</description>
            <content type="html"><![CDATA[<p>之后打算用这个博客记录一下学习
Skip to main content
Search</p>
<p>Docs  Power Platform  Power Apps  Create apps  Dataverse  Why choose Dataverse?  Work with any app
Search
Filter by title
Dataverse
What is Dataverse?
Overview
Work with any data
Importing and exporting data
Work with any app
Table overview
Tables and metadata
Types of tables
Create a table
Create a custom table that has components
Edit a table
Create and edit virtual tables
Virtual table OData v4 data provider
Define alternate keys using Power Apps portal
Define alternate keys using solution explorer
SharePoint, OneNote, and OneDrive integration
Translate customized table and column text
Import translated table and column text
Security in Dataverse
API limits overview
For developers
Chatbots
AI Builder
Work with any type of app
06/16/2020
6 minutes to read</p>
<p>Note</p>
<p>Effective November 2020:</p>
<p>Common Data Service has been renamed to Microsoft Dataverse. Learn more
Some terminology in Microsoft Dataverse has been updated. For example, entity is now table and field is now column. Learn more
This article will be updated soon to reflect the latest terminology.</p>
<p>Microsoft Dataverse provides multiple ways to integrate in any type of app&amp;—mobile, web, desktop, device, system, or service. For cloud solutions, there are ways to integrate regardless of the model in which your solution is deployed—infrastructure as a service (IaaS), platform as a service (PaaS), or software as a service (SaaS). For IaaS-based solutions, the integration approach also works well if solutions are running inside of containers.</p>
<p>In some cases, integration with an app can be achieved by using business logic contained in Dataverse. In other cases, it will involve integration via events, the Dataverse OData API, or using plug-ins.</p>
<p>Defining business logic
tables in Dataverse can use rich server-side logic and validation to ensure data quality and reduce repetitive code in each app that creates and uses data in a table.</p>
<p>Business rules: Validate data across multiple columns and tables, and provide warning and error messages, regardless of the app used to create the data. More information: Create a business rule for a table</p>
<p>Business process flows: Guide users to ensure that they enter data consistently and follow the same steps every time. Business process flows are currently only supported for model-driven apps. More information: Business processes flows overview</p>
<p>Workflows: Automate business processes without user interaction. More information: Classic Dataverse workflows</p>
<p>Business logic with code: Supports advanced developer scenarios to extend the app directly through code. More information: Apply business logic using code</p>
<p>Integrating with apps by using events
A common approach of app integration is through the use of events. For example, an event such as adding a new row occurs in Dataverse, and this should be communicated to an associated system so that an action can be taken. For example, if a new support request was raised, it might trigger an SMS message to be sent to the assigned support staff.</p>
<p>This interactivity can also occur in the opposite direction—an update in an external system might result in data being added, updated, or deleted from a Dataverse environment.</p>
<p>The most popular approaches in Dataverse involve webhooks, Azure messaging (Service Bus, Event Hubs), Azure Logic Apps, or Power Automate.</p>
<p>Events in Dataverse</p>
<p>Webhooks
With Dataverse, you can send data about events that occur on the service to a web app by using webhooks. A webhook is a lightweight HTTP pattern for connecting web APIs and services with a publish-and-subscribe model. Webhook senders notify receivers about events by making requests to receiver endpoints with some information about the events.</p>
<p>Webhooks enable developers and ISVs to integrate Dataverse data with their own custom code hosted on external services. By using the webhook model, you can secure your endpoint by using authentication header or query string parameter keys. This is simpler than the shared access signature authentication model used with Azure Service Bus integration.</p>
<p>Webhooks can only scale to the point at which your hosted web service can handle the messages.</p>
<p>Webhooks enable synchronous and asynchronous steps.</p>
<p>Webhooks send POST requests with the JSON payload and can be consumed by any programming language or web app hosted anywhere.</p>
<p>Webhooks can be invoked from a plug-in or custom workflow activity.</p>
<p>Azure Service Bus
Service Bus provides a secure and reliable communication channel between Dataverse runtime data and external, cloud-based line-of-business apps. This capability is especially useful in keeping disparate Dataverse systems or other Dataverse servers synchronized with business data changes.</p>
<p>The sequence of events is as follows:</p>
<p>A listener app is registered on a Service Bus solution endpoint and begins actively listening for the Dataverse remote execution context on the service bus.</p>
<p>A user performs some operation in Dataverse that triggers execution of the registered out-of-the-box plug-in or a custom Azure-aware plug-in. The plug-in initiates a post, through an asynchronous service system job, of the current request data context to Service Bus.</p>
<p>The claims posted by Dataverse are authenticated. Service Bus then relays the remote execution context to the listener. The listener processes the context information and performs some business-related task with that information. Service Bus notifies the asynchronous service of a successful post and sets the status of the related system job to Completed.</p>
<p>Service Bus relays the request message data context between Dataverse and the Service Bus solution listener apps. Service Bus also provides data security so that only authorized apps can access the posted Dynamics 365 data. Authorization of Dataverse to post the data context to Service Bus, and for listener apps to read it, is managed by Azure shared access signatures.</p>
<p>More information: Service Bus and Service Bus authentication and authorization</p>
<p>Logic Apps and Power Automate
Logic Apps, offered via Azure, and Power Automate, offered via Microsoft Power Platform, can trigger a workflow that can be used to integrate with application events and data on a schedule or by activity in a database, system, service, or SaaS.</p>
<p>Logic Apps and Power Automate with Dataverse</p>
<p>These workflows can execute logic and interact with these systems using the hundreds of connectors to databases, PaaS, and SaaS.</p>
<p>For example, when a row is added to a relational database, such as SQL, this might trigger a workflow that can insert this data in Dataverse.</p>
<p>With the ability to create custom connectors by using Open API (formerly known as Swagger) definitions for a service, it&rsquo;s also straightforward to include services, functions, and code running in IaaS and Azure Kubernetes Service (AKS).</p>
<p>Integrating Dataverse into apps with the OData API
All popular programming languages support a form of integration with REST-based APIs.</p>
<p>Dataverse with the OData API</p>
<p>The Dataverse Web API provides a development experience that can be used across a wide variety of programming languages, platforms, and devices. The Web API implements the OData (Open Data Protocol), version 4.0, an OASIS standard for building and consuming RESTful APIs over rich data sources. You can learn more about this protocol at <a href="http://www.odata.org">www.odata.org</a>. For more information about this standard, see <a href="http://www.oasis-open.org">www.oasis-open.org</a>.</p>
<p>Dataverse takes an &ldquo;API first&rdquo; approach. This means that the service doesn&rsquo;t just provide a mechanism to query data, it also provides metadata from the service on business rules, constraints, and so on that you can use to build intelligent, responsive apps and services.</p>
<p>The API is secured by using OAuth. OAuth requires an idtable provider for authentication. For Dataverse, the idtable provider is Azure Active Directory (Azure AD). To authenticate with Azure AD by using a Microsoft work or school account, use the Azure AD Authentication Libraries (ADAL).</p>
<p>For more information about getting started with the Dataverse Web API, see Use the Dataverse Web API.</p>
<p>For more information about using the Dataverse Web API with OAuth, see Use OAuth with Dataverse.</p>
<p>Plug-ins
The Dataverse provides the ability to write code that sits between the API and the data. This code, written in .NET, is referred to as a plug-in. Because the plug-in sits between the API and the data, it enforces the same logic on every app.</p>
<p>Plug-ins can be synchronous or asynchronous, and perform the following tasks:</p>
<p>Return errors to the user.</p>
<p>Query Dataverse data to evaluate logic to perform.</p>
<p>Perform data operations.</p>
<p>Perform outbound HTTP requests.</p>
<p>Plug-ins are registered at points in the event pipeline, which are illustrated here.</p>
<p>Plug-in event pipeline</p>
<p>Within the event pipeline, the following events can occur:</p>
<p>Requests and Responses can be examined and rejected or manipulated in several steps of the event pipeline.</p>
<p>Validation handlers can throw custom exceptions to reject operations that your logic considers invalid.</p>
<p>Pre-operation handlers can modify requests before the database operation.</p>
<p>Post-operation handlers can modify responses.</p>
<p>Async handlers perform automation after the response is returned.</p>
<p>One constraint with plug-ins is that they must be self-contained. If integration code requires references to other libraries, integration can be done by using Azure Functions.</p>
<p>Azure Functions
Azure Functions provides a serverless code execution option for business and integration logic.</p>
<p>Dataverse with Azure Functions</p>
<p>Functions are triggered by a call from an external system, service, or code. For Dataverse, that trigger can come directly from Dataverse using Service Bus, a webhook, or a call from a plug-in. Additionally, the Azure Functions call can be initiated via a flow in either Logic Apps or Power Automate that involves the Common Data Service connector.</p>
<p>More information: Use plug-ins to extend business processes</p>
<p>Feedback
Submit and view feedback for</p>
<p>View all page feedback 
Is this page helpful?
Yes  No
In this article
Defining business logic
Integrating with apps by using events
Logic Apps and Power Automate
Integrating Dataverse into apps with the OData API
Plug-ins
English (United States)
Previous Version Docs Blog Contribute Privacy &amp; Cookies Terms of Use Site Feedback Trademarks © Microsoft 2021</p>
]]></content>
        </item>
        
    </channel>
</rss>
